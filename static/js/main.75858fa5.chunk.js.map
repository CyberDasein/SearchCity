{"version":3,"sources":["components/ChosenSities.jsx","components/InputSearchSity.jsx","components/SityApp.js","reducers/actions.js","App.js","serviceWorker.js","reducers/sityReducer.js","reducers/rootReducer.js","index.js","reducers/sessionState.js"],"names":["useStyles","makeStyles","root","display","marginBottom","justifyContent","alignItems","width","bullet","margin","transform","title","fontSize","pos","ChosenSities","chosenSities","removeSity","classes","map","sityName","Card","key","id","className","CardContent","Typography","variant","name","CardActions","IconButton","aria-label","onClick","size","wrap","option","marginRight","btn","maxHeight","InputSearchSity","props","React","useState","inputValue","setInputValue","value","blur","setBlur","Autocomplete","clearOnEscape","open","length","onInputChange","event","target","trim","options","sities","noOptionsText","getOptionLabel","city","renderOption","Fragment","style","color","label","String","fromCodePoint","countryToFlag","renderInput","params","TextField","onBlur","onFocus","Button","newSity","Date","now","toString","addSity","sitiesWrap","border","padding","height","overflowY","mapDispachToProps","sity","type","payload","connect","state","app","marginTop","Grid","container","spacing","item","md","direction","loadedSities","App","axios","get","then","data","setSities","Container","maxWidth","this","Component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","filter","sessionState","serializedState","sessionStorage","getItem","JSON","parse","error","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.75858fa5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    marginBottom: 20,\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function ChosenSities({ chosenSities, removeSity }) {\r\n  const classes = useStyles();\r\n\r\n  return chosenSities.map((sityName) => (\r\n    <Card key={sityName.id} className={classes.root}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\">{sityName.name}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          onClick={() => removeSity(sityName.id)}\r\n          size=\"small\"\r\n        >\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  ));\r\n}\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles({\r\n  wrap: {\r\n    display: \"flex\",\r\n  },\r\n  option: {\r\n    fontSize: 15,\r\n    \"& > span\": {\r\n      marginRight: 10,\r\n      fontSize: 18,\r\n    },\r\n  },\r\n  root: {\r\n    marginRight: 21,\r\n    width: \"70%\",\r\n  },\r\n  btn: {\r\n    maxHeight: 40,\r\n    margin: 10,\r\n  },\r\n});\r\n\r\nconst InputSearchSity = (props) => {\r\n\r\n  const classes = useStyles();\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [blur, setBlur] = React.useState(false);\r\n\r\n  let countryToFlag = (label) => {\r\n    if (inputValue && inputValue.length >= 3) {\r\n      return typeof String.fromCodePoint !== \"undefined\" ? label : false;\r\n    }\r\n  };\r\n  let addHandler = () => {\r\n    if (inputValue) {\r\n      let newSity = {\r\n        name: inputValue,\r\n        id: Date.now().toString(),\r\n      };\r\n      props.addSity(newSity);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes.wrap}>\r\n      <Autocomplete\r\n        className={classes.root}\r\n        clearOnEscape={true}\r\n        open={\r\n          inputValue && inputValue.length >= 3 && blur !== true ? true : false\r\n        }\r\n        value={value}\r\n        onInputChange={(event) => {\r\n          let target = event.target.value;\r\n          if (target) {\r\n            setInputValue(target.trim());\r\n          }\r\n        }}\r\n        options={props.sities ? props.sities : false}\r\n        classes={{\r\n          option: classes.option,\r\n        }}\r\n        noOptionsText=\"нет данного города\"\r\n        getOptionLabel={(option) => option.city}\r\n        renderOption={(option) => (\r\n          <React.Fragment>\r\n            <span style={{ color: \"red\" }}>{countryToFlag(option.city)}</span>\r\n          </React.Fragment>\r\n        )}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            onBlur={() => setBlur(true)}\r\n            onFocus={() => setBlur(false) && setInputValue(\"\")}\r\n            label=\"введите 3 и более символов\"\r\n            variant=\"outlined\"\r\n          />\r\n        )}\r\n      />\r\n      <Button\r\n        onClick={addHandler}\r\n        className={classes.btn}\r\n        variant=\"contained\"\r\n        size=\"small\"\r\n        color=\"secondary\"\r\n      >\r\n        Выбрать\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputSearchSity;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ChosenSities from \"./ChosenSities\";\r\nimport InputSearchSity from \"./InputSearchSity\";\r\nimport { addSity, removeSity } from \"../reducers/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles({\r\n  sitiesWrap: {\r\n    border: \"1px solid red\",\r\n    padding: 15,\r\n    height: \"70vh\",\r\n    overflowY: \"auto\",\r\n  },\r\n});\r\n\r\nconst SityApp = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div style={{ marginTop: 20 }}>\r\n      <Grid container spacing={3}>\r\n        <Grid\r\n          item\r\n          md={6}\r\n          container\r\n          direction=\"column\"\r\n        >\r\n          <h2>Города России</h2>\r\n          <InputSearchSity\r\n            sities={props.loadedSities}\r\n            addSity={props.addSity}\r\n          />\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          md={6}\r\n          container\r\n          direction=\"column\"\r\n        >\r\n          <div className={classes.sitiesWrap}>\r\n            <h2>Выбранные города:</h2>\r\n            <ChosenSities\r\n              removeSity={props.removeSity}\r\n              chosenSities={props.chosenSities}\r\n            />\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispachToProps = {\r\n  addSity,\r\n  removeSity,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  chosenSities: state.app.chosenSities,\r\n});\r\nexport default connect(mapStateToProps, mapDispachToProps)(SityApp);\r\n","export function setSities(sities) {\r\n \r\n  return {\r\n    type: \"LOAD_SITIES\",\r\n    payload: sities,\r\n  };\r\n}\r\nexport function addSity(sity) {\r\n \r\n  return {\r\n    type: \"ADD_SITY\",\r\n    payload: sity,\r\n  };\r\n}\r\n\r\nexport function removeSity(id) {\r\n  \r\n  return {\r\n    type: \"REMOVE_SITY\",\r\n    payload: id,\r\n  };\r\n}\r\n","import React from \"react\";\nimport SityApp from \"./components/SityApp\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\nimport { setSities } from \"./reducers/actions\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    axios.get(\"russia.json\").then(({ data }) => {\n      this.props.setSities(data);\n    });\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"lg\">\n        <div className=\"App\">\n          <SityApp loadedSities={this.props.loadedSities} />\n        </div>\n      </Container>\n    );\n  }\n}\nconst mapDispachToProps = {\n  setSities,\n};\nconst mapStateToProps = (state) => ({\n  loadedSities: state.app.loadedSities,\n});\nexport default connect(mapStateToProps, mapDispachToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  chosenSities: [\r\n    {\r\n      name: \"Москва\",\r\n      id: \"12333\",\r\n    },\r\n    {\r\n      name: \"Питер\",\r\n      id: \"12334\",\r\n    },\r\n  ],\r\n  loadedSities: null,\r\n};\r\n\r\nexport const sityReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"LOAD_SITIES\":\r\n      return { ...state, loadedSities: action.payload };\r\n    case \"ADD_SITY\":\r\n      return {\r\n        ...state,\r\n        chosenSities: [...state.chosenSities, action.payload],\r\n      };\r\n    case \"REMOVE_SITY\":\r\n      return {\r\n        ...state,\r\n        chosenSities: state.chosenSities.filter(\r\n          (sity) => sity.id !== action.payload\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {combineReducers} from 'redux'\r\nimport { sityReducer } from './sityReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: sityReducer,\r\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { saveState, loadState } from \"./reducers/sessionState\";\n\nconst sessionState = loadState();\nconst store = createStore(rootReducer, sessionState);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"state\");\r\n\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return JSON.parse(serializedState);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    sessionStorage.setItem(\"state\", serializedState);\r\n  } catch (error) {\r\n  }\r\n};\r\n"],"sourceRoot":""}